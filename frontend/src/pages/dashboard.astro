---
// Dashboard do usu√°rio autenticado
import Layout from '../layouts/Layout.astro';
import SessionDisplay from '../components/SessionDisplay.tsx';
import AudioDeviceSelector from '../components/AudioDeviceSelector.tsx';
import StreamingStatus from '../components/StreamingStatus.tsx';
import Navbar from '../components/Navbar.tsx';
// import Sidebar from '../components/Sidebar.tsx'; // Se for usar sidebar

// L√≥gica para verificar autentica√ß√£o (exemplo, pode ser mais robusto)
// const cookies = Astro.cookies;
// const authToken = cookies.get('nakama_token')?.value; // Supondo que o token JWT √© armazenado em um cookie

// if (!authToken) {
//   return Astro.redirect('/login?reason=unauthenticated');
// }

// Mock de dados da sess√£o para exibi√ß√£o (em produ√ß√£o, viria da API)
const mockSession = {
  sessionId: "uuid-session-12345-67890",
  user: {
    username: "Usu√°rioTeste#1234",
    avatarUrl: "https://cdn.discordapp.com/embed/avatars/0.png"
  },
  isActive: true,
  expiresAt: new Date(Date.now() + 3600 * 1000).toISOString(),
  botConnected: false // Status de conex√£o do bot
};

// Em uma aplica√ß√£o real, voc√™ buscaria esses dados da API
// const response = await fetch('/api/user/session', { headers: { cookie: Astro.request.headers.get('cookie') } });
// const sessionData = await response.json();
---
<Layout title="Nakama - Dashboard">
  <Navbar user={mockSession.user} client:load />
  <div class="flex">
    {/* <Sidebar client:load /> */}
    <main class="flex-grow container mx-auto px-4 py-8">
      <div class="mb-8">
        <h1 class="text-4xl font-bold mb-4 text-purple-400">üéß Dashboard Nakama</h1>
        <p class="text-gray-300">Gerencie sua transmiss√£o de √°udio para o Discord</p>
      </div>

      <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Sess√£o Atual */}
        <div class="lg:col-span-1">
          <div class="bg-gray-800 p-6 rounded-lg shadow-lg">
            <h2 class="text-2xl font-semibold mb-4 text-teal-400">üÜî Sua Sess√£o</h2>
            <SessionDisplay session={mockSession} client:visible />
            <div class="mt-4 p-3 bg-blue-900/20 border border-blue-600 rounded">
              <p class="text-blue-300 text-sm">
                <strong>üí° Como usar:</strong><br/>
                No Discord, digite: <code class="bg-gray-700 px-1 rounded">/music {mockSession.sessionId}</code>
              </p>
            </div>
          </div>
        </div>

        {/* Configura√ß√£o de √Åudio */}
        <div class="lg:col-span-2">
          <div class="bg-gray-800 p-6 rounded-lg shadow-lg">
            <h2 class="text-2xl font-semibold mb-4 text-teal-400">üéôÔ∏è Configura√ß√£o de √Åudio</h2>
            <AudioDeviceSelector 
              sessionId={mockSession.sessionId}
              isConnectedToBot={mockSession.botConnected}
              client:visible 
            />
          </div>
        </div>

        {/* Status da Transmiss√£o */}
        <div class="lg:col-span-3">
          <div class="bg-gray-800 p-6 rounded-lg shadow-lg">
            <h2 class="text-2xl font-semibold mb-4 text-teal-400">üìä Status da Transmiss√£o</h2>
            <StreamingStatus 
              sessionId={mockSession.sessionId}
              client:visible 
            />
          </div>
        </div>
      </div>

      {/* Guia de Uso Passo a Passo */}
      <div class="mt-10 bg-gray-800/50 p-6 rounded-lg">
        <h2 class="text-2xl font-semibold mb-6 text-purple-400 text-center">üìã Guia Passo a Passo</h2>
        <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
          <div class="text-center p-4 bg-gray-700 rounded-lg">
            <div class="text-3xl mb-2">1Ô∏è‚É£</div>
            <h3 class="font-semibold text-purple-300 mb-2">Login Feito</h3>
            <p class="text-gray-300 text-sm">Voc√™ j√° est√° logado e sua sess√£o est√° ativa!</p>
          </div>
          <div class="text-center p-4 bg-gray-700 rounded-lg">
            <div class="text-3xl mb-2">2Ô∏è‚É£</div>
            <h3 class="font-semibold text-yellow-300 mb-2">Use /music no Discord</h3>
            <p class="text-gray-300 text-sm">Entre em um canal de voz e digite o comando com sua Session ID</p>
          </div>
          <div class="text-center p-4 bg-gray-700 rounded-lg">
            <div class="text-3xl mb-2">3Ô∏è‚É£</div>
            <h3 class="font-semibold text-blue-300 mb-2">Configure √Åudio</h3>
            <p class="text-gray-300 text-sm">Selecione o dispositivo de √°udio que quer transmitir</p>
          </div>
          <div class="text-center p-4 bg-gray-700 rounded-lg">
            <div class="text-3xl mb-2">4Ô∏è‚É£</div>
            <h3 class="font-semibold text-green-300 mb-2">Capture App</h3>
            <p class="text-gray-300 text-sm">Abra o Nakama Capture App no seu PC para iniciar</p>
          </div>
        </div>
      </div>

      {/* Informa√ß√µes da Sess√£o */}
      <div class="mt-6 text-center">
        <div class="inline-block bg-gray-700 px-4 py-2 rounded-lg">
          <span class="text-gray-400 text-sm">
            Sess√£o expira em: <span class="text-white font-mono">{new Date(mockSession.expiresAt).toLocaleTimeString('pt-BR')}</span>
          </span>
        </div>
      </div>
    </main>
  </div>
</Layout>

<style>
  /* Estilos para o dashboard */
  main {
    min-height: calc(100vh - 4rem); /* Subtrai altura do Navbar, ajuste conforme necess√°rio */
  }
</style>

<script>
  // Script para atualizar status do bot em tempo real
  document.addEventListener('DOMContentLoaded', () => {
    // Verificar status do bot periodicamente
    const checkBotStatus = async () => {
      try {
        const response = await fetch('/api/user/session', {
          credentials: 'include'
        });
        if (response.ok) {
          const data = await response.json();
          // Atualizar UI com status do bot
          // Esta l√≥gica seria implementada nos componentes React
        }
      } catch (err) {
        console.log('Erro ao verificar status:', err);
      }
    };

    // Verificar a cada 5 segundos
    const interval = setInterval(checkBotStatus, 5000);
    
    // Cleanup quando a p√°gina for fechada
    window.addEventListener('beforeunload', () => {
      clearInterval(interval);
    });
  });
</script>
